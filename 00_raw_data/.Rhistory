ds <- read.csv("00_raw_data/mastertable.csv")     # read in data set, call it "ds"
knitr::opts_chunk$set(echo = TRUE)
wd <- getwd()
raw_data_wd <- paste0(wd, "./00_raw_data")
resp_data_wd <- paste0(raw_data_wd, "/Respirometry Data")
wd <- getwd() # getwd tells us what the current wd is, we are using this to drop it in a variable called wd
raw_data_wd <- paste0(wd, "./00_raw_data")  # creates a variable with the name of the wd where raw data are stored
resp_data_wd <- paste0(raw_data_wd, "/Respirometry Data")
MRcalcs_wd <- paste0(resp_data_wd, "/MRcalcs")
MR_slopes_wd <- paste0(resp_data_wd, "/MR_Slopes")
MMR_wd <- paste0(resp_data_wd, "/MMR")
metadata_wd <- paste0(wd, "./01_metadata")  # creates a variable with the name of the wd where raw data are stored
figures_wd <- paste0(wd, "./03_figures")  # creates a variable with the name of the wd where raw data are stored
#calcSMR script shamelessly stolen and adapted from Eirik (who shamelessly stole it from Chabot, 2016)
calcSMR <- function(Y) {
u <- sort(Y)
tenpc <- round(0.1 * length(u))
SD10pc <- sd(u[1:tenpc])
low10pc = mean(u[(which((u > (mean(u[1:tenpc])-SD10pc)))):(tenpc+which((u > (mean(u[1:tenpc])-SD10pc -u[1]))))])
return(list(low10pc = low10pc))
}
.libPaths()
library(brms)
library(broom)
library(broom.mixed)
library(car)
library(coda)
library(dplyr)
library(ggeffects)
library(ggiraphExtra)
library(ggplot2)
library(ggpubr)
library(hms)
library(lme4)
library(lmerTest)
library(lubridate)
library(nlme)
library(posterior)
library(readxl)
library(tidyverse)
#calcSMR script shamelessly stolen and adapted from Eirik (who shamelessly stole it from Chabot, 2016)
calcSMR <- function(Y) {
u <- sort(Y)
tenpc <- round(0.1 * length(u))
SD10pc <- sd(u[1:tenpc])
low10pc = mean(u[(which((u > (mean(u[1:tenpc])-SD10pc)))):(tenpc+which((u > (mean(u[1:tenpc])-SD10pc -u[1]))))])
return(list(low10pc = low10pc))
}
# Export data
setwd(MRcalcs_wd)
wd <- getwd() # getwd tells us what the current wd is, we are using this to drop it in a variable called wd
raw_data_wd <- paste0(wd, "./00_raw_data")  # creates a variable with the name of the wd where raw data are stored
wd <- getwd() # getwd tells us what the current wd is, we are using this to drop it in a variable called wd
raw_data_wd <- paste0(wd, "./00_raw_data")  # creates a variable with the name of the wd where raw data are stored
MRcalcs_wd <- paste0(raw_data_wd, "/MRcalcs")
MR_slopes_wd <- paste0(raw_data_wd, "/MR_Slopes")
MMR_wd <- paste0(raw_data_wd, "/MMR")
metadata_wd <- paste0(wd, "./01_metadata")  # creates a variable with the name of the wd where raw data are stored
figures_wd <- paste0(wd, "./03_figures")  # creates a variable with the name of the wd where raw data are stored
knitr::opts_chunk$set(echo = TRUE)
.libPaths()
library(brms)
library(broom)
library(broom.mixed)
library(car)
library(coda)
library(dplyr)
library(ggeffects)
library(ggiraphExtra)
library(ggplot2)
library(ggpubr)
library(hms)
library(lme4)
library(lmerTest)
library(lubridate)
library(nlme)
library(posterior)
library(readxl)
library(tidyverse)
wd <- getwd() # getwd tells us what the current wd is, we are using this to drop it in a variable called wd
raw_data_wd <- paste0(wd, "./00_raw_data")  # creates a variable with the name of the wd where raw data are stored
MRcalcs_wd <- paste0(raw_data_wd, "/MRcalcs")
MR_slopes_wd <- paste0(raw_data_wd, "/MR_Slopes")
MMR_wd <- paste0(raw_data_wd, "/MMR")
metadata_wd <- paste0(wd, "./01_metadata")  # creates a variable with the name of the wd where raw data are stored
figures_wd <- paste0(wd, "./03_figures")  # creates a variable with the name of the wd where raw data are stored
#calcSMR script shamelessly stolen and adapted from Eirik (who shamelessly stole it from Chabot, 2016)
calcSMR <- function(Y) {
u <- sort(Y)
tenpc <- round(0.1 * length(u))
SD10pc <- sd(u[1:tenpc])
low10pc = mean(u[(which((u > (mean(u[1:tenpc])-SD10pc)))):(tenpc+which((u > (mean(u[1:tenpc])-SD10pc -u[1]))))])
return(list(low10pc = low10pc))
}
# Define a function to extract date strings from file names
extract_date <- function(files) {
gsub(".*?([0-9]{8}).*", "\\1", basename(files))
}
# Specify the directories where your files are located
csv_folder <- MR_slopes_wd
xlsx_folder <- MMR_wd
# Get the list of files in each folder
csv_files <- list.files(csv_folder, pattern = "_MR_slopes.csv", full.names = TRUE)
xlsx_files <- list.files(xlsx_folder, pattern = "_MMR.xlsx", full.names = TRUE)
# Extract date strings from file names
csv_dates <- extract_date(csv_files)
xlsx_dates <- extract_date(xlsx_files)
matching_files <- Map(function(date) {
csv_file <- csv_files[grep(date, csv_dates)]
xlsx_file <- xlsx_files[grep(date, xlsx_dates)]
return(list(csv = csv_file, xlsx = xlsx_file))
}, unique(c(csv_dates, xlsx_dates)))
# Loop through matching files and perform your data processing
for (i in seq_along(matching_files)) {
date <- unique(csv_dates)[i]
current_files <- matching_files[[i]]  # Renamed 'files' to 'current_files'
# Process CSV data
tb_respirometry <- read_csv(current_files$csv) %>%
rename(
chamber_ch = Chamber.No,
ID_fish    = Ind,
mass       = Mass,
length     = Length,
volume_ch  = Ch.Volume,
DOunit     = DO.unit,
dateTime   = Date.Time,
Temp_class = Temp.class,
slope_wBR  = Slope.with.BR,
BRSlope    = BR.Slope
)  %>%
mutate(
dateTime       = as.POSIXct(ymd_hms(dateTime)),
Time           = as_hms(ymd_hms(dateTime)),
Date           = as.Date(dateTime, format = "%Y/%m/%d"),
)
tb_respirometry <- tb_respirometry %>%
mutate(
volume_net = volume_ch - mass,
MR_wBR     = abs(slope_wBR)*(volume_net/1000)*60*60, #uncomment for mgO2/hr instead
BR         = BRSlope*(volume_ch/1000)*60*60,
MR         = MR_wBR + BR,
BR_perc    = (BR/MR_wBR)*100
)
#Calculate RMR and variance in MR for each fish, create a new table for individual RMR calcs
tb_rmr <- tb_respirometry %>%
group_by(chamber_ch) %>%
arrange(chamber_ch, dateTime) %>%
slice(3:(n() - 1)) %>%
ungroup()  %>%
group_by(
ID_fish, mass, length, volume_net, chamber_ch, Temp_class
) %>%
arrange(ID_fish) %>%
drop_na() %>%
summarise(
RMR        = mean(MR),
RMR_var    = var(MR),
RMR_perc   = (RMR_var/RMR)*100,
time_start = dateTime %>% min(),
time_end   = dateTime %>% max()
)
#Calculate SMR for each fish, create a new table for individual SMR calcs
tb_smr <-
tb_respirometry %>%
group_by(
ID_fish, mass,length, volume_net, chamber_ch
) %>%
arrange(ID_fish) %>%
drop_na() %>%
summarise(
SMR        = calcSMR(MR)$low10pc %>% unname(),
time_start = dateTime %>% min(),
time_end   = dateTime %>% max()
)
# Process XLSX data
tb_mmr <- read_excel(current_files$xlsx) %>%
rename(
chamber_ch = Chamber.No,
ID_fish    = Ind,
mass       = Mass,
volume_ch  = Ch.Volume,
DOunit     = DO.unit,
dateTime   = Date.Time,
Temp_class = Temp.class,
slope_wBR  = Slope.with.BR,
BRSlope    = BR.Slope
)  %>%
mutate(
dateTime       = as.POSIXct(ymd_hms(dateTime)),
Time           = as_hms(ymd_hms(dateTime)),
Date           = as.Date(dateTime, format = "%Y/%m/%d"),
) %>%
drop_na()
tb_mmr <- tb_mmr %>%
mutate(
volume_net = volume_ch - mass,
MMR_wBR    = abs(slope_wBR)*(volume_net/1000)*60*60, #uncomment for mgO2/hr instead
BR         = abs(BRSlope)*(volume_ch/1000)*60*60,
MMR        = MMR_wBR - BR,
BR_perc    = (BR/MMR_wBR)*100
) %>%
arrange(ID_fish)
# Combine the processed data
# Combine the processed data, selecting only specific columns
tb_MR_master <- tb_rmr %>%
left_join(select(tb_smr, ID_fish, SMR), by = "ID_fish") %>%
left_join(select(tb_mmr, ID_fish, MMR), by = "ID_fish") %>%
select(-matches(".x$")) %>%
rename_with(~gsub("\\.y$", "", .), matches(".y$"))
# Export data
setwd(MRcalcs_wd)
write.csv(tb_MR_master, file = paste0(date, "_MRcalcs.csv"), col.names = NA, row.names = FALSE)
}
# read all "_MRcalcs.csv" files, bind into one table, and add columns with logged values
file.list <- list.files()
calcs_all <- lapply(file.list, read_csv)
tb_MRcalcs <- bind_rows(calcs_all, .id="Resp_Day") %>%
mutate(
log_SMR_low10pc = log10(SMR),
log_mass = log10(mass),
log_RMR = log10(RMR),
log_MMR = log10(MMR),
Resp_Day = as.numeric(Resp_Day)
)
# assign Month category to all timepoints
tb_MRcalcs$Month <- cut(
tb_MRcalcs$Resp_Day,
breaks = c(0, 13, seq(23, max(tb_MRcalcs$Resp_Day) + 10, by = 10)),
right = FALSE,
labels = c("April", "May", "June", "July", "August", "September")
)
tb_MRcalcs <- tb_MRcalcs[which(tb_MRcalcs$Month != "April"),] # remove April data from analysis due to temperature inconsistency
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE, # no warnings
cache = TRUE,# Cacheing to save time when kniting
tidy = TRUE,
echo = TRUE)
# read all "_MRcalcs.csv" files, bind into one table, and add columns with logged values
file.list <- list.files()
calcs_all <- lapply(file.list, read_csv)
# read all "_MRcalcs.csv" files, bind into one table, and add columns with logged values
file.list <- list.files(MRcalcs_wd)
calcs_all <- lapply(file.list, read_csv)
# read all "_MRcalcs.csv" files, bind into one table, and add columns with logged values
setwd(MRcalcs_wd)
file.list <- list.files()
calcs_all <- lapply(file.list, read_csv)
# read all "_MRcalcs.csv" files, bind into one table, and add columns with logged values
setwd(MRcalcs_wd)
file.list <- list.files(MRcalcs_wd)
calcs_all <- lapply(file.list, read_csv)
setwd(MRcalcs_wd)
calcs_all <- lapply(file.list, read_csv)
tb_MRcalcs <- bind_rows(calcs_all, .id="Resp_Day") %>%
mutate(
log_SMR_low10pc = log10(SMR),
log_mass = log10(mass),
log_RMR = log10(RMR),
log_MMR = log10(MMR),
Resp_Day = as.numeric(Resp_Day)
)
# assign Month category to all timepoints
tb_MRcalcs$Month <- cut(
tb_MRcalcs$Resp_Day,
breaks = c(0, 13, seq(23, max(tb_MRcalcs$Resp_Day) + 10, by = 10)),
right = FALSE,
labels = c("April", "May", "June", "July", "August", "September")
)
tb_MRcalcs <- tb_MRcalcs[which(tb_MRcalcs$Month != "April"),] # remove April data from analysis due to temperature inconsistency
View(tb_MRcalcs)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE, # no warnings
cache = TRUE, # Caching to save time when knitting
tidy = TRUE,
echo = TRUE)
.libPaths()
library(brms)
library(broom)
library(broom.mixed)
library(car)
library(coda)
library(dplyr)
library(ggeffects)
library(ggiraphExtra)
library(ggplot2)
library(ggpubr)
library(hms)
library(lme4)
library(lmerTest)
library(lubridate)
library(nlme)
library(posterior)
library(readxl)
library(tidyverse)
wd <- getwd() # getwd tells us what the current wd is, we are using this to drop it in a variable called wd
raw_data_wd <- paste0(wd, "./00_raw_data")  # creates a variable with the name of the wd where raw data are stored
MRcalcs_wd <- paste0(raw_data_wd, "/MRcalcs")
MR_slopes_wd <- paste0(raw_data_wd, "/MR_Slopes")
MMR_wd <- paste0(raw_data_wd, "/MMR")
metadata_wd <- paste0(wd, "./01_metadata")  # creates a variable with the name of the wd where metadata are stored
figures_wd <- paste0(wd, "./03_figures")  # creates a variable with the name of the wd where figures are stored
#calcSMR script shamelessly stolen and adapted from Eirik (who shamelessly stole it from Chabot, 2016)
calcSMR <- function(Y) {
u <- sort(Y)
tenpc <- round(0.1 * length(u))
SD10pc <- sd(u[1:tenpc])
low10pc = mean(u[(which((u > (mean(u[1:tenpc])-SD10pc)))):(tenpc+which((u > (mean(u[1:tenpc])-SD10pc -u[1]))))])
return(list(low10pc = low10pc))
}
# Define a function to extract date strings from file names
extract_date <- function(files) {
gsub(".*?([0-9]{8}).*", "\\1", basename(files))
}
# Specify the directories where your files are located
csv_folder <- MR_slopes_wd
xlsx_folder <- MMR_wd
# Get the list of files in each folder
csv_files <- list.files(csv_folder, pattern = "_MR_slopes.csv", full.names = TRUE)
xlsx_files <- list.files(xlsx_folder, pattern = "_MMR.xlsx", full.names = TRUE)
# Extract date strings from file names
csv_dates <- extract_date(csv_files)
xlsx_dates <- extract_date(xlsx_files)
matching_files <- Map(function(date) {
csv_file <- csv_files[grep(date, csv_dates)]
xlsx_file <- xlsx_files[grep(date, xlsx_dates)]
return(list(csv = csv_file, xlsx = xlsx_file))
}, unique(c(csv_dates, xlsx_dates)))
# Loop through matching files and perform your data processing
for (i in seq_along(matching_files)) {
date <- unique(csv_dates)[i]
current_files <- matching_files[[i]]  # Renamed 'files' to 'current_files'
# Process CSV data
tb_respirometry <- read_csv(current_files$csv) %>%
rename(
chamber_ch = Chamber.No,
ID_fish    = Ind,
mass       = Mass,
length     = Length,
volume_ch  = Ch.Volume,
DOunit     = DO.unit,
dateTime   = Date.Time,
Temp_class = Temp.class,
slope_wBR  = Slope.with.BR,
BRSlope    = BR.Slope
)  %>%
mutate(
dateTime       = as.POSIXct(ymd_hms(dateTime)),
Time           = as_hms(ymd_hms(dateTime)),
Date           = as.Date(dateTime, format = "%Y/%m/%d"),
)
tb_respirometry <- tb_respirometry %>%
mutate(
volume_net = volume_ch - mass,
MR_wBR     = abs(slope_wBR)*(volume_net/1000)*60*60, #uncomment for mgO2/hr instead
BR         = BRSlope*(volume_ch/1000)*60*60,
MR         = MR_wBR + BR,
BR_perc    = (BR/MR_wBR)*100
)
#Calculate RMR and variance in MR for each fish, create a new table for individual RMR calcs
tb_rmr <- tb_respirometry %>%
group_by(chamber_ch) %>%
arrange(chamber_ch, dateTime) %>%
slice(3:(n() - 1)) %>%
ungroup()  %>%
group_by(
ID_fish, mass, length, volume_net, chamber_ch, Temp_class
) %>%
arrange(ID_fish) %>%
drop_na() %>%
summarise(
RMR        = mean(MR),
RMR_var    = var(MR),
RMR_perc   = (RMR_var/RMR)*100,
time_start = dateTime %>% min(),
time_end   = dateTime %>% max()
)
#Calculate SMR for each fish, create a new table for individual SMR calcs
tb_smr <-
tb_respirometry %>%
group_by(
ID_fish, mass,length, volume_net, chamber_ch
) %>%
arrange(ID_fish) %>%
drop_na() %>%
summarise(
SMR        = calcSMR(MR)$low10pc %>% unname(),
time_start = dateTime %>% min(),
time_end   = dateTime %>% max()
)
# Process XLSX data
tb_mmr <- read_excel(current_files$xlsx) %>%
rename(
chamber_ch = Chamber.No,
ID_fish    = Ind,
mass       = Mass,
volume_ch  = Ch.Volume,
DOunit     = DO.unit,
dateTime   = Date.Time,
Temp_class = Temp.class,
slope_wBR  = Slope.with.BR,
BRSlope    = BR.Slope
)  %>%
mutate(
dateTime       = as.POSIXct(ymd_hms(dateTime)),
Time           = as_hms(ymd_hms(dateTime)),
Date           = as.Date(dateTime, format = "%Y/%m/%d"),
) %>%
drop_na()
tb_mmr <- tb_mmr %>%
mutate(
volume_net = volume_ch - mass,
MMR_wBR    = abs(slope_wBR)*(volume_net/1000)*60*60, #uncomment for mgO2/hr instead
BR         = abs(BRSlope)*(volume_ch/1000)*60*60,
MMR        = MMR_wBR - BR,
BR_perc    = (BR/MMR_wBR)*100
) %>%
arrange(ID_fish)
# Combine the processed data
# Combine the processed data, selecting only specific columns
tb_MR_master <- tb_rmr %>%
left_join(select(tb_smr, ID_fish, SMR), by = "ID_fish") %>%
left_join(select(tb_mmr, ID_fish, MMR), by = "ID_fish") %>%
select(-matches(".x$")) %>%
rename_with(~gsub("\\.y$", "", .), matches(".y$"))
# Export data
setwd(MRcalcs_wd)
write.csv(tb_MR_master, file = paste0(date, "_MRcalcs.csv"), col.names = NA, row.names = FALSE)
}
# read all "_MRcalcs.csv" files, bind into one table, and add columns with logged values
file.list <- list.files(MRcalcs_wd)
setwd(MRcalcs_wd)
calcs_all <- lapply(file.list, read_csv)
tb_MRcalcs <- bind_rows(calcs_all, .id="Resp_Day") %>%
mutate(
log_SMR_low10pc = log10(SMR),
log_mass = log10(mass),
log_RMR = log10(RMR),
log_MMR = log10(MMR),
Resp_Day = as.numeric(Resp_Day)
)
# assign Month category to all timepoints
tb_MRcalcs$Month <- cut(
tb_MRcalcs$Resp_Day,
breaks = c(0, 13, seq(23, max(tb_MRcalcs$Resp_Day) + 10, by = 10)),
right = FALSE,
labels = c("April", "May", "June", "July", "August", "September")
)
setwd(raw_data_wd)
biometrics <- read.csv("FinalBiometrics.csv")
ds <- left_join(tb_MRcalcs, biometrics, by = c("ID_fish")) #a table with all resp data and metadata collected in dissection
ds <- ds[which(ds$Month != "April"),] # remove April data from analysis due to temperature inconsistency
install.packages("pacman")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
ds1 <- ds1 %>%
# Filter to keep only ID_fish where a mass exists for Month == "May"
filter(ID_fish %in% ID_fish[Month == "May" & !is.na(mass)])
