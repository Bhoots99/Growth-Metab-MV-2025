ggplot(tb_sgr, aes(x = Mass, y = SGR)) +
geom_point(aes(color = Category, shape = as.factor(Stage)), size = 3) +  # Plot original data points
geom_line(aes(y = predict), color = "black") +  # Plot model line
#geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), fill = "gray", alpha = 0.4) +
labs(x = "Mass", y = "SGR") +
theme_classic() +
scale_color_manual(values = c("limegreen", "orange", "red"))
#Plot residuals of SGR - mod_SGR predictions across mass values
gg_SMRvsSGR_resid <- ggplot(data = tb_sgr) +
geom_point(aes(y = resid, x = Mass, colour = Category, shape = as.factor(Stage)), size = 3) +
theme_classic() +
geom_hline(yintercept = 0) +
scale_color_manual(values = c("limegreen", "orange", "red"))
setwd("C:/Users/s222141733/OneDrive - Deakin University/Beth Hoots/Growth Performance Pilot/Text")
library(readxl)
library(ggplot2)
library(ggpubr)
library(ggbreak)
library(gridExtra)
library(tidyverse)
library(dplyr)
library(lme4)
library(nlme)
library(effects)
tb_sgr <- read_excel("3 - Growth and MO2 Rates.xlsx", sheet = "2.SGR_Long")
#model SGR over initial mass and calculate predicted values and residuals
mod_SGR <- lmer(SGR ~ log(Mass) + (1|FishID), data = tb_sgr)
summary(mod_SGR)
tb_sgr$predict <- predict(mod_SGR, type = "response", allow.new.levels = TRUE)
tb_sgr$resid <- resid(mod_SGR)
plot(mod_SGR)
hist(resid(mod_SGR))
#Plot SGR vs. mass with model line and confidence interval
ggplot(tb_sgr, aes(x = Mass, y = SGR)) +
geom_point(aes(color = Category, shape = as.factor(Stage)), size = 3) +  # Plot original data points
geom_line(aes(y = predict), color = "black") +  # Plot model line
#geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), fill = "gray", alpha = 0.4) +
labs(x = "Mass", y = "SGR") +
theme_classic() +
scale_color_manual(values = c("limegreen", "orange", "red"))
#Plot residuals of SGR - mod_SGR predictions across mass values
gg_SMRvsSGR_resid <- ggplot(data = tb_sgr) +
geom_point(aes(y = resid, x = Mass, colour = Category, shape = as.factor(Stage)), size = 3) +
theme_classic() +
geom_hline(yintercept = 0) +
scale_color_manual(values = c("limegreen", "orange", "red"))
# Fit repeated measures mixed effects model
mod_mmrm <- gls(SGR ~ log(Mass)*Stage, correlation = corSymm(form = ~ 1 | FishID / Stage), data = tb_sgr)
# Summary of the model
summary(mod_mmrm)
tb_sgr$predict <- predict(mod_mmrm, type = "response", allow.new.levels = TRUE)
tb_sgr$resid <- resid(mod_mmrm)
plot(mod_mmrm)
hist(resid(mod_mmrm))
# Obtain confidence intervals for fixed effects
fixed_effects_ci <- intervals(mod_mmrm, level = 0.95)
# Extract lower and upper confidence intervals
ci_lower <- fixed_effects_ci[,"Lower 95%"]
View(fixed_effects_ci)
# Extract lower and upper confidence intervals
ci_lower <- fixed_effects_ci[,"Lower"]
ci_upper <- fixed_effects_ci[,"Upper"]
View(fixed_effects_ci)
View(fixed_effects_ci)
View(fixed_effects_ci)
# Obtain predictions and confidence intervals
predictions <- predict(mmrm_model, interval = "confidence", level = 0.95, data = tb_sgr)
# Obtain predictions and confidence intervals
predictions <- predict(mod_mmrm, interval = "confidence", level = 0.95, data = tb_sgr)
# Extract lower and upper confidence intervals
lower_ci <- predictions[, "lwr"]
# Obtain predictions and confidence intervals
predictions <- diag(varPredict(mod_mmrm, data= tb_sgr))
# Fit repeated measures mixed effects model
mod_mmrm <- gls(SGR ~ log(Mass)*Stage, correlation = corSymm(form = ~ 1 | FishID / Stage), data = tb_sgr)
# Summary of the model
summary(mod_mmrm)
tb_sgr$predict <- predict(mod_mmrm, type = "response", allow.new.levels = TRUE)
tb_sgr$resid <- resid(mod_mmrm)
plot(mod_mmrm)
hist(resid(mod_mmrm))
View(mod_SGR)
View(tb_sgr)
# Fit repeated measures mixed effects model
mod_mmrm <- gls(SGR ~ log(Mass)*Stage + (1|FishID), data = tb_sgr)
# Fit repeated measures mixed effects model
mod_mmrm <- gls(SGR ~ log(Mass)*Stage, correlation = corSymm(form = ~ 1 | FishID / Stage), data = tb_sgr)
# Summary of the model
summary(mod_mmrm)
tb_sgr$predict <- predict(mod_mmrm, type = "response", allow.new.levels = TRUE)
tb_sgr$resid <- resid(mod_mmrm)
plot(mod_mmrm)
hist(resid(mod_mmrm))
# Obtain predictions and confidence intervals
tb_sgr$predict <- predict(mod_mmrm)
tb_sgr$ci_lower <- tb_sgr$predict - 1.96 * sqrt(diag(vcov(mod_mmrm)))
tb_sgr$ci_upper <- tb_sgr$predict + 1.96 * sqrt(diag(vcov(mod_mmrm)))
# Plot the data with model and confidence intervals
ggplot(tb_sgr, aes(x = Mass, y = SGR)) +
?lmer
??lmer
rm(list=ls())
#load in required packages
library(tidyverse)
library(modelr)
library(lubridate)
library(hms)
library(ggplot2)
library(RColorBrewer)
library(readxl)
library(dplyr)
library(cowplot)
library(ggsignif)
library(wesanderson)
library(lsmeans)
library(emmeans)
library(lme4)
library(multcomp)
library(multcompView)
#don't forget to set the appropriate working directory
setwd("C:/Users/s222141733/OneDrive - Deakin University/Beth Hoots/2023 Growth Performance/Analysis/Raw Data/Respirometry Data/MRcalcs")
#read all "_MRcalcs.csv" files, bind into one table, and add columns with logged values
file.list <- list.files()
calcs_all <- lapply(file.list, read_csv)
tb_MRcalcs <- bind_rows(calcs_all, .id="Resp_Day") %>%
mutate(
log_SMR_low10pc = log10(SMR),
log_mass = log10(mass),
log_RMR = log10(RMR),
log_MMR = log10(MMR),
Resp_Day = as.numeric(Resp_Day)
)
tb_MRcalcs$Month <- cut(
tb_MRcalcs$Resp_Day,
breaks = c(0, 13, seq(23, max(tb_MRcalcs$Resp_Day) + 10, by = 10)),
right = FALSE,
labels = c("April", "May", "June", "July", "August", "September")
)
#creating a linear regression between SMR and mass for both temperature treatments (note, 18 will contain values from initial trial, which is generally <18C)
lm_smr_18 = lm(log_SMR_low10pc ~ log_mass, tb_MRcalcs[which(tb_MRcalcs$Temp_class == 18 & tb_MRcalcs$Resp_Day > 12),])
lm_smr_23 = lm(log_SMR_low10pc ~ log_mass, tb_MRcalcs[which(tb_MRcalcs$Temp_class == 23),])
summary(lm_smr_18)
summary(lm_smr_23)
#log_mass_18 = data.frame(log_mass = (mean(tb_MRcalcs[which(tb_MRcalcs$Temp_class == 18 & tb_MRcalcs$Resp_Day > 12),]$log_mass))) #pulling the mean mass value of fish in 18C treatment, naming it "log_mass_18"
#log_mass_23 = data.frame(log_mass = (mean(tb_MRcalcs[which(tb_MRcalcs$Temp_class == 23),]$log_mass))) #pulling the mean mass value of fish in 23C treatment, naming it "log_mass_23"
log_mass_grandmean = data.frame(log_mass = (mean(tb_MRcalcs[which(tb_MRcalcs$Resp_Day > 12),]$log_mass))) #pulling the mean mass value of fish in 18C treatment, naming it "log_mass_18"
#predicting the SMR value for mass using our regression
SMR_mean_predicted_18 = predict(lm_smr_18, newdata = log_mass_grandmean)
SMR_mean_predicted_23 = predict(lm_smr_23, newdata = log_mass_grandmean)
#adding the residuals calculated from our regressions to our table
tb_MRcalcs <- tb_MRcalcs %>%
mutate(resid = ifelse(Temp_class == 18, residuals(lm_smr_18), residuals(lm_smr_23)))
#Adding new columns with mass standardized SMR calculations
tb_MRcalcs <-
tb_MRcalcs %>%
mutate(
log_SMR_mass = ifelse(Temp_class == 18, SMR_mean_predicted_18 + resid, SMR_mean_predicted_23 + resid), #use the 2 models to calc residuals + predicted values for each FishID/time
SMR_mass = as.numeric(10^log_SMR_mass),
SMR_resid = resid,
log_SMR_mlnd = NULL,
log_SMR_low10pc = NULL,
log_SMR_mass = NULL
)
#creating a linear regression between RMR and mass for both temperature treatments
lm_rmr_18 = lm(log_RMR ~log_mass, tb_MRcalcs[which(tb_MRcalcs$Temp_class == 18 & tb_MRcalcs$Resp_Day > 12),])
lm_rmr_23 = lm(log_RMR ~log_mass, tb_MRcalcs[which(tb_MRcalcs$Temp_class == 23),])
summary(lm_rmr_18)
summary(lm_rmr_23)
#predicting the RMR value for mass using our regression
RMR_mean_predicted_18 = predict(lm_rmr_18, newdata = log_mass_grandmean)
RMR_mean_predicted_23 = predict(lm_rmr_23, newdata = log_mass_grandmean)
#adding the residuals calculated from our regressions to our table
tb_MRcalcs <- tb_MRcalcs %>%
mutate(resid = ifelse(Temp_class == 18, residuals(lm_rmr_18), residuals(lm_rmr_23)))
#Adding new columns with mass standardized RMR calculations
tb_MRcalcs <- tb_MRcalcs %>%
mutate(
log_RMR_mass = ifelse(Temp_class == 18, RMR_mean_predicted_18 + resid, RMR_mean_predicted_23 + resid), #use the 2 models to calc residuals + predicted values for each FishID/time
RMR_mass = as.numeric(10^log_RMR_mass),
RMR_resid = resid,
log_RMR = NULL,
log_RMR_mass = NULL
)
#creating a linear regression between MMR and mass for both temperature treatments
lm_mmr_18 = lm(log_MMR ~ log_mass, tb_MRcalcs[which(tb_MRcalcs$Temp_class == 18 & tb_MRcalcs$Resp_Day > 12),])
lm_mmr_23 = lm(log_MMR ~ log_mass, tb_MRcalcs[which(tb_MRcalcs$Temp_class == 23),])
#predicting the MMR value for "mass" using our regression
MMR_mean_predicted_18 = predict(lm_mmr_18, newdata = log_mass_grandmean)
MMR_mean_predicted_23 = predict(lm_mmr_23, newdata = log_mass_grandmean)
#adding the residuals calculated from our regressions to our table
tb_MRcalcs <- tb_MRcalcs %>%
mutate(resid = ifelse(Temp_class == 18, residuals(lm_mmr_18), residuals(lm_mmr_23)))
#Adding new columns with mass standardized MMR calculations
tb_MRcalcs <-
tb_MRcalcs %>%
mutate(
log_MMR_mass = ifelse(Temp_class == 18, MMR_mean_predicted_18 + resid, MMR_mean_predicted_23 + resid), #use the 2 models to calc residuals + predicted values for each FishID/time,
MMR_mass = as.numeric(10^log_MMR_mass),
MMR_resid = resid,
log_MMR_mass = NULL,
log_MMR = NULL,
) %>%
drop_na() %>%
arrange(Resp_Day, ID_fish)
# Create the grouped variable
tb_MRcalcs$Month <- cut(
tb_MRcalcs$Resp_Day,
breaks = c(0, 13, seq(23, max(tb_MRcalcs$Resp_Day) + 10, by = 10)),
right = FALSE,
labels = c("April", "May", "June", "July", "August", "September")
)
setwd("C:/Users/s222141733/OneDrive - Deakin University/Beth Hoots/2023 Growth Performance/Analysis/Figures")
write.csv(tb_MRcalcs, file = "MRcalcs.csv", col.names = TRUE, row.names = FALSE) #Change the name
############################# MR Diagnostic Plots #################################
setwd("C:/Users/s222141733/OneDrive - Deakin University/Beth Hoots/2023 Growth Performance/Analysis/Raw Data/Respirometry Data/MR_Slopes")
file.listSMR <- list.files()
SMR_all <- lapply(file.listSMR, read_csv)
tb_SMRall <- bind_rows(SMR_all, .id="Resp_Day") %>%
arrange(Resp_Day, Ind, Date.Time)
setwd("C:/Users/s222141733/OneDrive - Deakin University/Beth Hoots/2023 Growth Performance/Analysis/Raw Data/Respirometry Data/MMR")
file.listMMR <- list.files()
MMR_all <- lapply(file.listMMR, read_excel)
tb_MMRall <- bind_rows(MMR_all, .id="Resp_Day") %>%
drop_na()%>%
left_join(tb_SMRall %>% select(Ind, Resp_Day, Length), by = c("Ind", "Resp_Day")) %>%
distinct() %>%
arrange(Resp_Day, Ind, Date.Time)
setwd("C:/Users/s222141733/OneDrive - Deakin University/Beth Hoots/2023 Growth Performance/Analysis/Raw Data/Respirometry Data/MMR")
file.listMMR <- list.files()
MMR_all <- lapply(file.listMMR, read_excel)
tb_MMRall <- bind_rows(MMR_all, .id="Resp_Day") %>%
drop_na()%>%
left_join(tb_SMRall %>% select(Ind, Resp_Day, Length), by = c("Ind", "Resp_Day")) %>%
distinct() %>%
arrange(Resp_Day, Ind, Date.Time)
tb_MRall <- bind_rows(tb_SMRall, tb_MMRall)
tb_MMRall <- bind_rows(MMR_all, .id="Resp_Day")
View(tb_MMRall)
tb_MMRall <- bind_rows(MMR_all, .id="Resp_Day") %>%
drop_na()%>%
left_join(tb_SMRall %>% select(Ind, Resp_Day, Length), by = c("Ind", "Resp_Day")) %>%
distinct() %>%
arrange(Resp_Day, Ind, Date.Time)
